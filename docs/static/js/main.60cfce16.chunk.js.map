{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["IdolButton","_this","this","style","backgroundColor","idolData","props","idol","color","react_default","a","createElement","class","onClick","onClickHandler","React","Component","IdolsSelect","_this2","buttons","idols","map","index","App_IdolButton","key","IdolItem","_this3","units","idoltounit","unit","i","unit_member","unittoidol","filter","x","member","toggleClickHandler","padding","margin","alt","height","src","concat","image","App","_this4","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","listIdols","keys","selectedIdols","indexOf","selected","slice","push","setState","v","_this5","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","App_IdolItem","toggleIdol","err","return","App_IdolsSelect","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mgrCAOMA,mLACK,IAAAC,EAAAC,KACDC,EAAQ,CACZC,gBAAiBC,EAASH,KAAKI,MAAMC,MAAMC,OAE7C,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAM,UAENT,MAAOA,EACPU,QAAS,kBAAIZ,EAAKK,MAAMQ,eAAeb,EAAKK,MAAMC,QAElDE,EAAAC,EAAAC,cAAA,OAAKC,MAAM,iBACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eAAeV,KAAKI,MAAMC,eAbtBQ,IAAMC,WAoBzBC,mLACK,IAAAC,EAAAhB,KACDiB,EAAUjB,KAAKI,MAAMc,MAAMC,IAAI,SAACd,EAAMe,GAC1C,OACEb,EAAAC,EAAAC,cAACY,EAAD,CAAYC,IAAKF,EAAOf,KAAMA,EAAMO,eAAgB,SAACP,GAAD,OAAQW,EAAKZ,MAAMQ,eAAeP,QAG1F,OACEE,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACRO,UATiBJ,IAAMC,WAe1BS,mLACI,IAAAC,EAAAxB,KACAyB,EAAQC,EAAW1B,KAAKI,MAAMC,MAAMc,IAAI,SAACQ,EAAMC,GACnD,IAAMC,EAAcC,EAAWH,GAAMI,OAAO,SAAAC,GAAC,OAAIA,IAAIR,EAAKpB,MAAMC,OAAMc,IAAI,SAACc,EAAQL,GACjF,OACErB,EAAAC,EAAAC,cAACY,EAAD,CAAYC,IAAKM,EAAGvB,KAAM4B,EAAQrB,eAAgB,SAACP,GAAD,OAAQmB,EAAKpB,MAAM8B,mBAAmB7B,QAG5F,OACEE,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACRiB,GAEFE,KAKD5B,EAAQ,CACZC,gBAAiBC,EAASH,KAAKI,MAAMC,MAAMC,MAC3C6B,QAAS,OACTC,OAAQ,QAGV,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,WAAWT,MAAOA,GAC3BM,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eAAeC,QAAS,kBAAIa,EAAKpB,MAAM8B,mBAAmBV,EAAKpB,MAAMC,SAChFE,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACTH,EAAAC,EAAAC,cAAA,OAAK4B,IAAKrC,KAAKI,MAAMC,KAAMiC,OAAO,MAAMC,IAAG,8DAAAC,OAAgErC,EAASH,KAAKI,MAAMC,MAAMoC,SACrIlC,EAAAC,EAAAC,cAAA,UAAKT,KAAKI,MAAMC,OAElBE,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACRe,WAhCYZ,IAAMC,WAmFd4B,cA3Cb,SAAAA,EAAYtC,GAAM,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA5C,KAAA0C,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA5C,KAAA4C,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhD,KAAMI,KACD6C,MAAQ,CACXC,UAAWN,OAAOO,KAAKzB,GACvB0B,cAAe,IAJDT,0EAQPtC,GACT,IAAiD,IAA5CL,KAAKiD,MAAMG,cAAcC,QAAQhD,GAAc,CAClD,IAAMiD,EAAWtD,KAAKiD,MAAMG,cAAcG,QAC1CD,EAASE,KAAKnD,GACdL,KAAKyD,SAAS,CAAEL,cAAeE,QAC1B,CACL,IAAMA,EAAWtD,KAAKiD,MAAMG,cAAcrB,OAAO,SAAA2B,GAAC,OAAEA,IAAIrD,IACxDL,KAAKyD,SAAS,CAAEL,cAAeE,sCAI1B,IAAAK,EAAA3D,KACDkB,EAAQ,GADP0C,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEP,QAAAC,EAAAC,EAAejE,KAAKiD,MAAMG,cAA1Bc,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAwC,KAA9BhC,EAA8BoC,EAAAM,MACtCpD,EAAMsC,KACJjD,EAAAC,EAAAC,cAAC8D,EAAD,CACEjD,IAAKM,EACLvB,KAAMuB,EACNM,mBAAoB,SAAC7B,GAAD,OAAQsD,EAAKa,WAAWnE,QAP3C,MAAAoE,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GAYP,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAACkE,EAAD,CACEzD,MAAOlB,KAAKiD,MAAMC,UAClBtC,eAAgB,SAACP,GAAD,OAAQsD,EAAKa,WAAWnE,MAEzCa,UAtCSL,IAAMC,WCrEJ8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.60cfce16.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport unittoidol  from './unit-to-idol.json';\nimport idoltounit  from './idol-to-unit.json';\nimport idolData from './idolData.json'\n\nclass IdolButton extends React.Component {\n  render() {\n    const style = {\n      backgroundColor: idolData[this.props.idol].color\n    }\n    return (\n      <div\n        class=\"idolBox\"\n        /*class={selectedIdols === idol ? 'checked' : ''}*/\n        style={style}\n        onClick={()=>this.props.onClickHandler(this.props.idol)}\n      >\n        <div class=\"textContainer\">\n          <div class=\"idolNameBox\">{this.props.idol}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass IdolsSelect extends React.Component {\n  render() {\n    const buttons = this.props.idols.map((idol, index) => {\n      return(\n        <IdolButton key={index} idol={idol} onClickHandler={(idol)=>this.props.onClickHandler(idol)}/>\n      );\n    });\n    return (\n      <div class=\"idolView\">\n        {buttons}\n      </div>\n    );\n  }\n}\n\nclass IdolItem extends React.Component {\n  render(){\n    const units = idoltounit[this.props.idol].map((unit, i) => {\n      const unit_member = unittoidol[unit].filter(x => x!==this.props.idol).map((member, i) => {\n        return(\n          <IdolButton key={i} idol={member} onClickHandler={(idol)=>this.props.toggleClickHandler(idol)} />\n        );\n      });\n      return (\n        <div class=\"unitTable\">\n          <div class=\"unitName\">\n            {unit}\n          </div>\n          {unit_member}\n        </div>\n      );\n    });\n\n    const style = {\n      backgroundColor: idolData[this.props.idol].color,\n      padding: \"10px\",\n      margin: \"10px\"\n    }\n\n    return (\n      <div class=\"unitView\" style={style}>\n        <div class=\"deleteButton\" onClick={()=>this.props.toggleClickHandler(this.props.idol)}></div>\n        <div class=\"unitIdol\">\n          <img alt={this.props.idol} height=\"80%\" src={`https://millionlive.idolmaster.jp/theaterdays/images/top/a/${idolData[this.props.idol].image}`} />\n          <h3>{this.props.idol}</h3>\n        </div>\n        <div class=\"unitList\">\n          {units}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      listIdols: Object.keys(idoltounit),\n      selectedIdols: [],\n    }\n  }\n\n  toggleIdol(idol) {\n    if ( this.state.selectedIdols.indexOf(idol) === -1 ){\n      const selected = this.state.selectedIdols.slice()\n      selected.push(idol)\n      this.setState({ selectedIdols: selected });\n    } else {\n      const selected = this.state.selectedIdols.filter(v=>v!==idol)\n      this.setState({ selectedIdols: selected });\n    }\n  }\n\n  render() {\n    const idols = [];\n    for(const i of this.state.selectedIdols){\n      idols.push(\n        <IdolItem\n          key={i}\n          idol={i}\n          toggleClickHandler={(idol)=>this.toggleIdol(idol)}\n        />\n      );\n    }\n\n    return (\n      <div class=\"container\">\n        <IdolsSelect\n          idols={this.state.listIdols}\n          onClickHandler={(idol)=>this.toggleIdol(idol)}\n        />\n        {idols}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}