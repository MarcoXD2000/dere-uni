{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["IdolButton","_this","this","style","borderColor","idolData","props","idol","color","selectedIdols","indexOf","react_default","a","createElement","className","concat","classNameSuffix","id","onClick","onClickHandler","React","Component","IdolsSelect","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","filterType","type","filter","v","setState","push","_this3","checked","onChange","setFilter","_this4","buttons","idols","map","index","App_IdolButton","key","filterButtonBuilder","UnitItem","_this5","unitMember","unittoidol","unit","member","i","toggleClickHandler","App","_this6","listIdols","keys","idoltounit","selectedUnits","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","selected","slice","units","updateSelectedUnits","suffix","_this7","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","App_UnitItem","toggleIdol","setClassNameSuffix","App_IdolsSelect","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.408b70ee.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './App.small.css';\nimport './idolIcon.css';\n\nimport unittoidol  from \"./unit-to-idol.json\";\nimport idoltounit  from \"./idol-to-unit.json\";\nimport idolData from \"./idolData.json\";\n\nclass IdolButton extends React.Component {\n  render() {\n    var style = {\n      borderColor: idolData[this.props.idol].color\n    }\n    if(this.props.selectedIdols.indexOf(this.props.idol) !== -1){\n      style[\"backgroundColor\"] = idolData[this.props.idol].color\n    }\n\n    return (\n      <div\n        className={`idolBox${this.props.classNameSuffix}`}\n        id={this.props.idol}\n        style={style} onClick={()=>{\n          this.props.onClickHandler(this.props.idol);\n        }}\n      >\n        <div className=\"boxContainer\">\n          <div className={`idolImage${this.props.classNameSuffix} idolIcon-${this.props.idol}`}></div>\n          <div className={`idolNameBox${this.props.classNameSuffix}`}>{this.props.idol}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass IdolsSelect extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      filterType: [\"princess\", \"fairy\", \"angel\"],\n    }\n  }\n\n  setFilter(type){\n    if(this.state.filterType.indexOf(type) !== -1){\n      const filterType = this.state.filterType.filter(v=>v!==type)\n      this.setState({filterType: filterType})\n    }else{\n      const filterType = this.state.filterType\n      filterType.push(type)\n      this.setState({filterType: filterType})\n    }\n  }\n  \n  filterButtonBuilder(type){\n    return(\n      <label>\n        <div\n          className={`filterCheckboxType${this.props.classNameSuffix} filterCheckbox-${type} ${(this.state.filterType.indexOf(type)!==-1)?\"checked\":\"\"}`}\n        >\n          <div className={`typeNameBox${this.props.classNameSuffix}`}>\n            <input\n              type=\"checkbox\"\n              checked={(this.state.filterType.indexOf(type)!==-1)?\"checked\":\"\"}\n              onChange={()=>this.setFilter(type)}\n            />\n            {type}\n          </div>\n        </div>\n      </label>\n    )\n\n  }\n\n  render() {\n    const buttons = this.props.idols.map((idol, index) => {\n      if(this.state.filterType.indexOf(idolData[idol].type) === -1){\n        return null\n      }\n      return(\n        <IdolButton\n          key={index}\n          selectedIdols={this.props.selectedIdols}\n          idol={idol}\n          classNameSuffix={this.props.classNameSuffix}\n          onClickHandler={(idol)=>this.props.onClickHandler(idol)}\n        />\n      );\n    });\n    return (\n      <div className=\"idolView\">\n        <form>\n          {this.filterButtonBuilder(\"princess\")}\n          {this.filterButtonBuilder(\"fairy\")}\n          {this.filterButtonBuilder(\"angel\")}\n        </form>\n        {buttons}\n      </div>\n    );\n  }\n}\n\nclass UnitItem extends React.Component {\n  render(){\n    const unitMember = unittoidol[this.props.unit].map((member, i) => {\n        return(\n          <IdolButton\n            key={i}\n            selectedIdols={this.props.selectedIdols}\n            idol={member}\n            classNameSuffix={this.props.classNameSuffix}\n            onClickHandler={(idol)=>this.props.toggleClickHandler(idol)}\n          />\n        );\n      }\n    );\n\n    return(\n      <div key={this.props.unit} className={`unitTable${this.props.classNameSuffix}`}>\n        <div className={`unitNameView${this.props.classNameSuffix}`}>\n          <div className={`unitNameBox${this.props.classNameSuffix}`}>\n            {this.props.unit}\n          </div>\n        </div>\n        <div className=\"unitIdolView\">\n          {unitMember}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      listIdols: Object.keys(idoltounit),\n      selectedIdols: [],\n      selectedUnits: [],\n      classNameSuffix: \"\",\n    }\n  }\n\n  updateSelectedUnits(idols){\n    const selectedUnits = []\n    for(const idol of idols){\n      for(const unit of idoltounit[idol]){\n        if(selectedUnits.indexOf(unit) === -1){\n          selectedUnits.push(unit)\n        }\n      }\n    }\n    return selectedUnits;\n  }\n  \n  toggleIdol(idol) {\n    if ( this.state.selectedIdols.indexOf(idol) === -1 ){\n      const selected = this.state.selectedIdols.slice()\n      selected.push(idol);\n      const units = this.updateSelectedUnits(selected)\n      this.setState({ selectedIdols: selected, selectedUnits: units });\n    } else {\n      const selected = this.state.selectedIdols.filter(v=>v!==idol);\n      const units = this.updateSelectedUnits(selected)\n      this.setState({ selectedIdols: selected, selectedUnits: units });\n    }\n  }\n  setClassNameSuffix(suffix){\n    this.setState({classNameSuffix: suffix})\n  }\n\n  render() {\n    const units = [];\n    for(const i of this.state.selectedUnits){\n      units.push(\n        <UnitItem\n          key={i}\n          unit={i}\n          selectedIdols={this.state.selectedIdols}\n          classNameSuffix={this.state.classNameSuffix}\n          toggleClickHandler={(idol)=>this.toggleIdol(idol)}\n        />\n      )\n    }\n\n    return (\n      <div>\n        <div className=\"header\">\n          <div className=\"container\">\n            <div className=\"headerView\">\n              <div className=\"headerTitleView\">\n                <h3 className=\"headerTitleBox\">\n                MILLIONLIVE!-UNIT-SEARCH\n                </h3>\n              </div>\n            <div className=\"headerMenuView\">\n            </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"main\">\n          <div className=\"container\">\n            <button className=\"changeStyleButton\" onClick={()=>{this.setClassNameSuffix(\"\")}}>Normal</button>\n            <button className=\"changeStyleButton\" onClick={()=>{this.setClassNameSuffix(\"Small\")}}>Small</button>\n            <IdolsSelect\n              idols={this.state.listIdols}\n              selectedIdols={this.state.selectedIdols}\n              classNameSuffix={this.state.classNameSuffix}\n              onClickHandler={(idol)=>this.toggleIdol(idol)}\n            />\n            <div className=\"unitView\">\n              <div className=\"unitBox\">\n                <div className={`unitList${this.state.classNameSuffix}`}>\n                  {units}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <div className=\"container\">\n            <hr />\n            <center>\n              <p>Copyright (c) 2019 雪んこ茶房</p>\n              <p>The copyright to THE IDOLM@STER contents belongs to BANDAI NAMCO Entertainment Inc.</p>\n            </center>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}