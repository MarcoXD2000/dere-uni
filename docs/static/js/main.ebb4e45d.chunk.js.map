{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["IdolButton","_this","this","react_default","a","createElement","onClick","props","onClickHandler","idol","React","Component","IdolsSelect","_this2","buttons","idols","map","App_IdolButton","i","IdolItem","_this3","units","idoltounit","unit","unit_member","unittoidol","filter","x","member","addClickHandler","deleteClickHandler","border","App","_this4","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","listIdols","keys","selectedIdols","indexOf","selected","slice","push","list","v","setState","_this5","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","App_IdolItem","addIdolToList","deleteIdolFromList","err","return","App_IdolsSelect","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebb4e45d.chunk.js","sourcesContent":["import React from 'react';\n\nimport unittoidol  from './unit-to-idol.json';\nimport idoltounit  from './idol-to-unit.json';\n\nclass IdolButton extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={()=>this.props.onClickHandler(this.props.idol)}\n      >\n        {this.props.idol}\n      </button>\n    );\n  }\n}\n\nclass IdolsSelect extends React.Component {\n  render() {\n    const buttons = this.props.idols.map((idol) => {\n      return(\n        <IdolButton idol={idol} onClickHandler={(i)=>this.props.onClickHandler(i)}/>\n      );\n    });\n    return (\n      <div>\n        {buttons}\n      </div>\n    );\n  }\n}\n\nclass IdolItem extends React.Component {\n  render(){\n    const units = idoltounit[this.props.idol].map((unit) => {\n      const unit_member = unittoidol[unit].filter(x => x!==this.props.idol).map((member) => {\n        return(\n          <IdolButton idol={member} onClickHandler={(idol)=>this.props.addClickHandler(idol)} />\n        );\n      });\n      return (\n        <tr>\n          <td>{unit}</td>\n          <td>{unit_member}</td>\n        </tr>\n      );\n    });\n\n    return (\n      <div>\n        <div>\n          <h3>{this.props.idol}</h3>\n          <button onClick={()=>this.props.deleteClickHandler(this.props.idol)}>削除</button>\n        </div>\n        <div>\n          <table border=\"1\"><tbody>{units}</tbody></table>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      listIdols: Object.keys(idoltounit),\n      selectedIdols: [],\n    }\n  }\n\n  addIdolToList(idol) {\n    if ( this.state.selectedIdols.indexOf(idol) === -1 ){\n      const selected = this.state.selectedIdols.slice()\n      selected.push(idol)\n      const list = this.state.listIdols.filter(v=>v !== idol)\n      this.setState({ selectedIdols: selected, listIdols: list });\n    }\n  }\n\n  deleteIdolFromList(idol) {\n    const selected = this.state.selectedIdols.filter(v=>v!==idol)\n    const list = Object.keys(idoltounit).filter(v=>selected.indexOf(v)<0)\n    this.setState({ selectedIdols: selected, listIdols: list });\n  }\n\n  render() {\n    const idols = [];\n    for(const i of this.state.selectedIdols){\n      idols.push(\n        <IdolItem\n          idol={i}\n          addClickHandler={(idol)=>this.addIdolToList(idol)}\n          deleteClickHandler={(idol)=>this.deleteIdolFromList(idol)}\n        />\n      );\n    }\n\n    return (\n      <div>\n        {idols}\n        <IdolsSelect\n          idols={this.state.listIdols}\n          onClickHandler={(idol)=>this.addIdolToList(idol)}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}